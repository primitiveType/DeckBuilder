<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Api" #>
<#
    XmlDocument doc = new XmlDocument();
    // Replace this file path with yours:
    doc.Load(@"./EventDefinitions.xml");
#>
using System;
using Api;
using System.Reflection;

public class Events : Component{
<#
    foreach (XmlNode node in doc.SelectNodes("/catalog"))
    {
        foreach (XmlNode eventNode in node.SelectNodes("event"))
        {
#>    #region Code for event <#= eventNode.Attributes["id"].Value #>
<#
            CreateInvocator(eventNode);
#>    #endregion Code for event <#= eventNode.Attributes["id"].Value #>
<#
        }
    }
#>
}
<#
    foreach (XmlNode node in doc.SelectNodes("/catalog"))
    {
        foreach (XmlNode eventNode in node.SelectNodes("event"))
        {
            CreateAttribute(eventNode);
            CreateEvent(eventNode);
        }
    }

    void CreateEvent(XmlNode eventNode)
    {
        string argsClassName = eventNode.Attributes["id"].Value + "EventArgs";
#>
    public delegate void <#= eventNode.Attributes["id"].Value #>Event (object sender, <#= argsClassName #> args);

    public class <#= argsClassName #> {<#
        var argnodes = eventNode.SelectNodes("arg");
        int argCount = argnodes != null ? argnodes.Count : 0;
        if (argCount > 0)
        {
            foreach (XmlNode argNode in argnodes)
            {
#>
        public  <#=
                    argNode.Attributes["type"].Value #> <#=
                    argNode.Attributes["name"].Value #> { get; }
<#
            }
#>
        public  <#= argsClassName #> (<#
            int currentArg = 0;
            foreach (XmlNode argNode in argnodes)
            {
                currentArg++;

                string postfix = "";
                if (currentArg != argCount)
                {
                    //add comma between arguments
                    postfix = ",";
                }
#><#= argNode.Attributes["type"].Value #> <#=
                    argNode.Attributes["name"].Value + postfix #> <#
            }
#>
  ){
    <#
            foreach (XmlNode argNode in argnodes)
            {
//set in ctor
#>
              this.<#=
                    argNode.Attributes["name"].Value #> = <#=
                    argNode.Attributes["name"].Value #>; 
<#
            }
#>
}

  }
<#
        }
    }
#>


<#
    void CreateAttribute(XmlNode eventNode)
    {
#>
public class On<#= eventNode.Attributes["id"].Value #>Attribute : EventAttribute {
    public override EventHandle GetEventHandle(MethodInfo attached, object instance, Events events)
    {
        var parameters = attached.GetParameters();
        if (parameters.Length == 0)
        {
            return events.SubscribeTo<#= eventNode.Attributes["id"].Value #>(delegate(object sender, <#= eventNode.Attributes["id"].Value #>EventArgs args)
            {
                attached.Invoke(instance, Array.Empty<object>());
            });
        }
        if(parameters[0].ParameterType != typeof(object) ||
        parameters[1].ParameterType != typeof(<#= eventNode.Attributes["id"].Value #>EventArgs)){
            throw new NotSupportedException("Wrong parameters for attribute usage! must match signature (object sender, <#= eventNode.Attributes["id"].Value #>EventArgs) args)");
        }
        return events.SubscribeTo<#= eventNode.Attributes["id"].Value #>(delegate(object sender, <#= eventNode.Attributes["id"].Value #>EventArgs args)
        {
            attached.Invoke(instance, new[] { sender, args });
        });
    }


}
<#
    }

    void CreateInvocator(XmlNode eventNode)
    {
        string eventName = eventNode.Attributes["id"].Value;
        string eventTypeName = eventNode.Attributes["id"].Value + "Event";
        string argsName = eventNode.Attributes["id"].Value + "EventArgs";
#>
private event <#= eventTypeName #> <#= eventName #>;
internal void On<#= eventName #>(<#= argsName #> args)
{
    <#= eventName #>?.Invoke(this, args);
}

public EventHandle SubscribeTo<#= eventName #>(<#= eventTypeName #> action)
{
    <#= eventName #> += action;
    return new EventHandle(() => <#= eventName #> -= action);
} 
<#
    }
#>

//TODO: generate attributes with static override functions that get the event handle from a game context.
//TODO: add generation of invoke functions.? 

 