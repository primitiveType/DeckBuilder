<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>

<#
    XmlDocument doc = new XmlDocument();
    // Replace this file path with yours:
    doc.Load(@"./EventDefinitions.xml");
    Generate();

    void Generate()
    {
#>
// ReSharper disable RedundantUsingDirective
// ReSharper disable PossibleNullReferenceException
// ReSharper disable InconsistentNaming

using System;
using System.Collections.Generic;
using System.Reflection;
using Api;

<#
        string catalogName = "EventsBase";
        foreach (XmlNode node in doc.SelectNodes("/catalog"))
        {
            catalogName = node.Attributes["name"].Value;
            string inherits = node.Attributes["inherits"].Value;
            string namespaceName = node.Attributes["namespace"].Value;
#>

namespace <#= namespaceName #>{
public abstract class <#= catalogName #> : <#= inherits #>{
<#
            foreach (XmlNode eventNode in node.SelectNodes("event"))
            {
#>    #region Code for event <#= eventNode.Attributes["id"].Value #>
<#
                CreateInvocator(eventNode);
#>    #endregion Code for event <#= eventNode.Attributes["id"].Value #>
<#
            }
        }
#>
}
<#
        foreach (XmlNode node in doc.SelectNodes("/catalog"))
        {
            foreach (XmlNode eventNode in node.SelectNodes("event"))
            {
                CreateAttribute(eventNode);
                CreateEvent(eventNode);
            }
        }

        void CreateEvent(XmlNode eventNode)
        {
            string argsClassName = eventNode.Attributes["id"].Value + "EventArgs";
#>
    public delegate void <#= eventNode.Attributes["id"].Value #>Event (object sender, <#= argsClassName #> args);

    public class <#= argsClassName #> {<#
            var argnodes = eventNode.SelectNodes("arg");
            var memberNodes = eventNode.SelectNodes("member");
            int argCount = argnodes != null ? argnodes.Count : 0;
            if (argCount > 0)
            {
                foreach (XmlNode argNode in argnodes)
                {
#>
        public  <#=
                        argNode.Attributes["type"].Value #> <#=
                        argNode.Attributes["name"].Value #> { get; }
<#
                }
                foreach (XmlNode argNode in memberNodes)
                {
#>
        public  <#=
                        argNode.Attributes["type"].Value #> <#=
                        argNode.Attributes["name"].Value #> { get; set;} 
<#
                    if (argNode.Attributes["value"]?.Value != null)
                    {
#>=<#=
                            argNode.Attributes["value"].Value #>;<#
                    }
                }
#>
        public  <#= argsClassName #> (<#
                int currentArg = 0;
                foreach (XmlNode argNode in argnodes)
                {
                    currentArg++;

                    string postfix = "";
                    if (currentArg != argCount)
                    {
                        //add comma between arguments
                        postfix = ",";
                    }
#><#= argNode.Attributes["type"].Value #> <#=
                        argNode.Attributes["name"].Value + postfix #> <#
                }
#>
  ){
    <#
                foreach (XmlNode argNode in argnodes)
                {
//set in ctor
#>
              this.<#=
                        argNode.Attributes["name"].Value #> = <#=
                        argNode.Attributes["name"].Value #>; 
<#
                }
#>
}

  }
<#
            }
        }
#>


<#
        void CreateAttribute(XmlNode eventNode)
        {
#>
/// <summary>
/// (object sender, <#= eventNode.Attributes["id"].Value #>EventArgs) args)
/// </summary>
public class On<#= eventNode.Attributes["id"].Value #>Attribute : EventsBaseAttribute {
    public override EventHandle GetEventHandle(MethodInfo attached, object instance, EventsBase events)
    {
        var parameters = attached.GetParameters();
        if (parameters.Length == 0)
        {
            return ((<#= catalogName #>)events).SubscribeTo<#= eventNode.Attributes["id"].Value #>(delegate
            {
                attached.Invoke(instance, Array.Empty<object>());
            });
        }
        if(parameters[0].ParameterType != typeof(object) ||
        parameters[1].ParameterType != typeof(<#= eventNode.Attributes["id"].Value #>EventArgs)){
            throw new NotSupportedException("Wrong parameters for attribute usage! must match signature (object sender, <#= eventNode.Attributes["id"].Value #>EventArgs) args)");
        }
        return ((<#= catalogName #>)events).SubscribeTo<#= eventNode.Attributes["id"].Value #>(delegate(object sender, <#= eventNode.Attributes["id"].Value #>EventArgs args)
        {
            attached.Invoke(instance, new[] { sender, args });
        });
    }


}
<#
        }

        void CreateInvocator(XmlNode eventNode)
        {
            string eventName = eventNode.Attributes["id"].Value;
            string eventTypeName = eventNode.Attributes["id"].Value + "Event";
            string argsName = eventNode.Attributes["id"].Value + "EventArgs";
#>
private event <#= eventTypeName #> <#= eventName #>;
internal virtual void On<#= eventName #>(<#= argsName #> args)
{
    <#= eventName #>?.Invoke(this, args);
}

public EventHandle SubscribeTo<#= eventName #>(<#= eventTypeName #> action)
{
    <#= eventName #> += action;
    return new EventHandle(() => <#= eventName #> -= action);
} 
<#
        }
#>

//TODO: generate attributes with static override functions that get the event handle from a game context.
//TODO: add generation of invoke functions.? 

 }

    
<#
    }

#>

 